// -*- mode: c++ -*-

//
// project pewter
// author Maximilien M. Cura
//

#ifndef __PEWTER_GEOMETRY
#define __PEWTER_GEOMETRY

namespace pewter {
    template <class T>
    struct Point
    {
        T x, y;

        Point (T _x, T _y)
            : x { _x }
            , y { _y }
        {}
        Point (Point const & _orig)
            : x { _orig.x }
            , y { _orig.y }
        {}

        Point<T> & operator= (Point<T> const & rhs)
        {
            x = rhs.x;
            y = rhs.y;
            return *this;
        }
    };

    template <class T>
    struct Rect
    {
        Point<T> origin, size;

        Rect (T x, T y, T w, T h)
            : origin { x, y }
            , size { w, h }
        {}
        Rect (Point<T> _o, Point<T> _s)
            : origin { _o }
            , size { _s }
        {}
        Rect (Rect const & _orig)
            : origin { _orig.origin }
            , size { _orig.size }
        {}

        bool contains (Point<T> rhs)
        {
            return ((rhs.x >= origin.x) && (rhs.y >= origin.y) && (rhs.x < (origin.x + size.x)) && (rhs.y < (origin.y + size.y)));
        }

        Rect<T> & operator= (Rect<T> const & rhs)
        {
            origin = rhs.origin;
            size   = rhs.size;
            return *this;
        }
    };
}

#endif /* !@__PEWTER_MATH_GEOMETRY */
