// -*- mode:c++ -*-

//
// project pewter
// author Maximilien M. Cura
//

#ifndef __PEWTER_DISPLAY
#define __PEWTER_DISPLAY

#include <Venice/Math/Integers>

#include <Pewter/Color>
#include <Pewter/Geometry>
#include <Pewter/Glyph>

#include <vector>
#include <list>
#include <deque>

namespace pewter {
    typedef vnz::math::_i32 DisplayCoord;

    template <class T>
    struct ResizingBuffer
    {
        T * inner = nullptr;
        Rect<DisplayCoord> footprint;

        ResizingBuffer (Rect<DisplayCoord> _footprint)
            : footprint { _footprint }
        {
            resize (_footprint);
        }

        ~ResizingBuffer ()
        {
            if (inner != nullptr) {
                free (inner);
            }
        }

        void resize (Rect<DisplayCoord> r)
        {
            footprint = r;
            if (inner != nullptr)
                free (inner);
            inner = static_cast<T *> (calloc (r.size.x * r.size.y, sizeof (T)));
        }

        T & operator[] (int i)
        {
            return inner[i];
        }
    };

    typedef vnz::math::_i32 LayerIndex;

    struct DisplayDelta
    {
        Point<DisplayCoord> where;
        Glyph * what;

        DisplayDelta (Point<DisplayCoord>, Glyph *);
    };

    struct Layer
    {
        Rect<DisplayCoord> box;

        ResizingBuffer<Glyph> layer_glyph_buffer;
        ResizingBuffer<bool> layer_mask_buffer;

        LayerIndex order;

        Layer (Rect<DisplayCoord>);

        void clear (Glyph);
    };

    struct Display
    {
        std::vector<Layer *> layers;
        // we use _u64 to hash the delta-where-coordinates to speed up delta rendering
        // by preventing "delta stacking".
        std::deque<DisplayDelta> deltas;
        std::list<Layer *> layer_order;

        Rect<DisplayCoord> box;
        ResizingBuffer<LayerIndex> layer_index_buffer;

        Display (Point<DisplayCoord>);

        // only changes Display's stuff, nothing else
        void size_change (Rect<DisplayCoord> new_size);

        void mask_layer (Layer *, bool);
        void mask_box_on_layer (Layer *, Rect<DisplayCoord>, bool);

        Glyph & at (Layer *, Point<DisplayCoord>);
        Glyph & at (Layer *, DisplayCoord, DisplayCoord);
        void needs_update (Layer *, Point<DisplayCoord>);
        void needs_update (Layer *, DisplayCoord, DisplayCoord);
    };

    struct Renderer
    {
        virtual void init ()  = 0;
        virtual void close () = 0;

        virtual void render_deltas (Display * display) = 0;
        virtual void render_full (Display * display)   = 0;
    };

}

#endif /* !@__PEWTER_DISPLAY */
