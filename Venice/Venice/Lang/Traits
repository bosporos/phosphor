// -*- mode: c++ -*-

//
// project venice
// author Maximilien M. Cura
//

#ifndef __VNZ_LANG_TRAITS
#define __VNZ_LANG_TRAITS

namespace Venice {
    template <typename T, T V>
    struct IntegralConstant
    {
        static constexpr T Value = V;
        constexpr operator T () const { return Value; }
        constexpr T operator() () const { return Value; }
    };

    template <typename T>
    struct IsLValueReference : IntegralConstant<bool, 0>
    {};

    template <typename T>
    struct IsLValueReference<T &> : IntegralConstant<bool, 1>
    {};

    template <typename T>
    struct IsReference : IntegralConstant<bool, 0>
    {};

    template <typename T>
    struct IsReference<T &> : IntegralConstant<bool, 1>
    {};

    template <typename T>
    struct IsReference<T &&> : IntegralConstant<bool, 1>
    {};

    template <typename T>
    struct IsRValueReference : IntegralConstant<bool, 0>
    {};

    template <typename T>
    struct IsRValueReference<T &&> : IntegralConstant<bool, 1>
    {};

    template <typename T>
    struct IsConst : IntegralConstant<bool, 0>
    {};

    template <typename T>
    struct IsConst<T const> : IntegralConstant<bool, 1>
    {};

    template <typename T, typename V>
    struct IsSame : IntegralConstant<bool, 0>
    {};

    template <typename T>
    struct IsSame<T, T> : IntegralConstant<bool, 1>
    {};
}

#endif
