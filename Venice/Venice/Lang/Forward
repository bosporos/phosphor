// -*- mode: c++ -*-

//
// project venice
// author Maximilien M. Cura
//

#ifndef __VNZ_LANG_FORWARD
#define __VNZ_LANG_FORWARD

#include <Venice/Compiler>
#include <Venice/Lang/Dequalify>

namespace Venice {
    template <typename T>
    ALWAYS_INLINE constexpr T && Forward (
        typename vnz::RemoveReference<T>::type & x)
    {
        return static_cast<T &&> (x);
    }

    template <typename T>
    ALWAYS_INLINE constexpr T && Forward (
        typename vnz::RemoveReference<T>::type && x)
    {
        static_assert (!vnz::IsLValueReference<T>::value, "Cannot forward an lvalue as an rvalue");
        return static_cast<T &&> (x);
    }
}

#endif
