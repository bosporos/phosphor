// -*- mode:c++ -*-

//
// project venice
// author Maximilien M. Cura
//

#ifndef __VNZA_ALLOC_INTERFACE
#define __VNZA_ALLOC_INTERFACE

#include <Venice/Math/Integers>
#ifdef __VNZA_USE_INTERNAL_ALLOC
#    include <Venice/Alloc/Alloc>
#else
#    include <malloc/malloc.h>
#endif /* !@__VNZA_USE_INTERNAL_ALLOC */

namespace vnz::alloc {
    struct Allocator
    {
        void * (*__allocation_call) (vnz::usize);
        void (*__deallocation_call) (void *);
        void (*__deinit_call) ();

        Allocator (void * (*)(math::usize), void (*) (void *), void (*) ());
        ~Allocator ();

        void * alloc (math::usize);
        void dealloc (void *);
    };

    extern Allocator * __default_allocator;
    void set_default_allocator (Allocator *);
    Allocator * get_default_allocator ();

    template <class T, class A>
    struct CoherentVector
    {
        typedef T item_type;
        typedef A allocator_type;

        item_type * inner;
        math::usize length;
        allocator_type * allocator;

        CoherentVector ()
            : inner { nullptr }
            , length { 0 }
            , allocator { ::vnza::alloc::get_default_allocator () }
        {}

        CoherentVector (Allocator * _allocator)
            : inner { nullptr }
            , length { 0 }
            , allocator { _allocator }
        {}

        CoherentVector (T * x)
            : inner { x }
            , length { 0 }
            , allocator { ::vnza::alloc::get_default_allocator () }
        {
            while (*x++ != 0)
                ++length;
        }

        CoherentVector (T * x, Allocator * _allocator)
            : inner { x }
            , length { 0 }
            , allocator { _allocator }
        {}

        CoherentVector (T * x, math::usize _length)
            : inner { x }
            , length { _length }
            , allocator { ::vnza::alloc : get_default_allocator () }
        {}

        CoherentVector (T * x, math::usize _length, Allocator * _allocator)
            : inner { x }
            , length { _length }
            , allocator { _allocator }
        {}

        CoherentVector (CoherentVector<T> const & x)
            : inner
        {
            x.allocator.
        }
    };
}

#endif /* !@__VNZA_ALLOC_INTERFACE */
