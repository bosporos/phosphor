// -*- mode: c++ -*-

//
// project venice
// author Maximilien M. Cura
//

#ifndef __VNZ_ALLOC
#define __VNZ_ALLOC

#include <Venice/Math/Integers>

namespace vnz::alloc {
    struct Slab
    {
        void * memory;
        usize size;
        usize align;

        Slab (usize _size, usize _align);
        ~Slab ();

        void * byte_offset (usize _offset);
        usize offset_align_ceil (usize _offset, usize _align);
    };

    struct RegionAllocator
    {
        Slab slab;
        usize mark = 0;

        RegionAllocator (usize _size, usize _align);
        ~RegionAllocator ();

        void * allocate_aligned (usize _osize, usize _oalign);

        template <class T>
        T * allocate (usize _oalign = 0)
        {
            if (!_oalign)
                _oalign = alignof (T);
            return allocate_aligned (sizeof (T), _oalign);
        }
    };

    struct RCRegionAllocator
    {
        union {
            // Unionize to enable explicit construction/destruction
            Slab slab;
        };
        usize mark              = 0;
        usize extant_references = 0;

        RCRegionAllocator (usize _size, usize _align);
        ~RCRegionAllocator ();

        void * allocate_aligned (usize _osize, usize _oalign);

        template <class T>
        T * allocate (usize _oalign = 0)
        {
            if (!_oalign)
                _oalign = alignof (T);
            return allocate_aligned (sizeof (T), _oalign);
        }

        void deallocate ();

        void free_region ();
    };
}

#endif /* !@__VNZ_ALLOC */
