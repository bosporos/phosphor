// -*- mode: c++ -*-

//
// project venice
// author Maximilien M. Cura
//

#ifndef __VNZ_SYNC_RWLOCK__PTHREADS
#define __VNZ_SYNC_RWLOCK__PTHREADS

#include <Venice/Compiler>
#include <Venice/Sys/pthread-base/Pthread>
#include <Venice/Atomic/Atomic>
#include <Venice/Math/Integers>

namespace vnz::sys::sync {
    struct RwLock
    {
        pthread_rwlock_t inner;
        ::vnz::atomic::Atomic<::vnz::math::_usize> num_readers;
        volatile bool write_locked;

        VNZ_FORBID_COPY (RwLock);
        VNZ_FORBID_MOVE (RwLock);

        RwLock ();
        ~RwLock ();

        void read ();
        bool try_read ();

        void write ();
        bool try_write ();

        void raw_unlock ();
        void read_unlock ();
        void write_unlock ();
    };
}

#endif /* !@__VNZ_SYNC_RWLOCK__PTHREADS */
