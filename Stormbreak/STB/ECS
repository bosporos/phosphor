// -*- mode: c++ -*-

//
// project stormbreak
// author Maximilien M. Cura
//

#ifndef __STB_ECS
#define __STB_ECS

#include <Venice/Compiler>
#include <Venice/Math/Integers>
#include <Venice/Option/Option>

#include <unordered_map>
#include <stack>
#include <set>

namespace STB {
    typedef vnz::math::_usize EntityID;
    typedef vnz::math::_usize EntityFamilyID;

    extern const EntityFamilyID DummyFamilyID;

    // So, a couple quick notes.
    // This system is designed so that a specific types of entities get to live in the runtime, and behaviours, etc.
    // Basically, we want to leave room for runtime-loaded configuration, etc.
    // So, we leave family id allocation & registration to the runtime, and allow systems to be defined on that side

    struct EntityManager
    {
        std::unordered_map<EntityID, EntityFamilyID> entity_mapping = {};
        std::stack<EntityID> free_entity_stack                      = {};
        EntityID next_entity                                        = 1;

        EntityID create_entity (EntityFamilyID = DummyFamilyID);
        bool entity_exists (EntityID);
        void destroy_entity (EntityID);

        void family (EntityID, EntityFamilyID);
        EntityFamilyID family (EntityID);
    };

    template <class T>
    struct ComponentManager
    {

        ALWAYS_INLINE static std::unordered_map<EntityID, T *> & component_mapping ()
        {
            static std::unordered_map<EntityID, T *> _component_mapping_internal = {};

            return _component_mapping_internal;
        }

        static void set_component (EntityID _entity_id, T * _component)
        {
            if (has_component (_entity_id))
                destroy_component (_entity_id);
            component_mapping[_entity_id] = _component;
        }

        static bool has_component (EntityID _entity_id)
        {
            return component_mapping ().contains (_entity_id);
        }

        static vnz::option::Option<T *> get_component (EntityID _entity_id)
        {
            if (LIKELY (has_component (_entity_id)))
                return component_mapping ()[_entity_id];
            return vnz::option::None ();
        }

        static void destroy_component (EntityID _entity_id)
        {
            if (LIKELY (has_component (_entity_id))) {
                component_mapping[_entity_id]->destroy ();
                component_mapping.erase (_entity_id);
            }
        }
    };

    template <class T>
    vnz::option::Option<T *> GetComponent (EntityID _entity_id)
    {
        return ComponentManager<T>::get_component (_entity_id);
    }

    template <class T>
    void AddComponent (EntityID _entity_id, T * _component)
    {
        ComponentManager<T>::set_component (_entity_id, _component);
    }

    struct World
    {
        EntityManager entity_manager;
    };

    typedef void (*SystemImplementationFn) (EntityID, World &);

    struct SystemStub
    {
        SystemImplementationFn system_impl;
        std::set<EntityFamilyID> system_applicable_families = {};

        SystemStub (SystemImplementationFn);

        void system_applies_to (EntityFamilyID, bool);
        bool system_applies_to (EntityFamilyID) const;

        void system_run (EntityID, World &);
    };

    typedef vnz::math::_usize SystemRegistrationID;

    struct SystemManager
    {
        static std::unordered_map<SystemRegistrationID, SystemStub *> system_mapping;
        static SystemRegistrationID next_registration_id;

        static SystemRegistrationID register_system (SystemStub *);
        static SystemStub * system (SystemRegistrationID);
    };

    struct SystemExecutor
    {
        World & world;

        SystemExecutor (World &);
        ~SystemExecutor ();

        void apply_system (SystemStub *);
    };
}

#endif /* !@__STB_ECS */
